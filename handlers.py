import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import db

HELP_TEXT = """
*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*
/add `—Ñ–∞–º–∏–ª–∏—è` `—á—Ç–æ –≤–∑—è–ª` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥.
_–ü—Ä–∏–º–µ—Ä: `/add –∏–≤–∞–Ω–æ–≤ –¥—Ä–µ–ª—å`_

/show `—Ñ–∞–º–∏–ª–∏—è` - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
_–ü—Ä–∏–º–µ—Ä: `/show –∏–≤–∞–Ω–æ–≤`_

/show - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–∏–∫–æ–≤.

/del `—Ñ–∞–º–∏–ª–∏—è` `—á—Ç–æ –≤–µ—Ä–Ω—É–ª` - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–ª–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
_–ü—Ä–∏–º–µ—Ä: `/del –∏–≤–∞–Ω–æ–≤ –¥—Ä–µ–ª—å`_

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""


def register_handlers(bot: telebot.TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞."""

    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        bot.send_message(message.chat.id, HELP_TEXT, parse_mode='Markdown')

    @bot.message_handler(commands=['add'])
    def add_handler(message):
        try:
            _, name, *item_parts = message.text.split()
            item = " ".join(item_parts)
            db.add_debt(name, item)
            bot.reply_to(
                message, f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {name.capitalize()} –≤–∑—è–ª(–∞) '{item}'.")
        except ValueError:
            bot.reply_to(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add —Ñ–∞–º–∏–ª–∏—è —á—Ç–æ_–≤–∑—è–ª`")

    @bot.message_handler(commands=['show'])
    def show_handler(message):
        args = message.text.split(maxsplit=1)
        if len(args) > 1:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            name = args[1]
            debts = db.get_debts_by_name(name)
            if not debts:
                bot.send_message(
                    message.chat.id, f"ü§∑‚Äç‚ôÇÔ∏è –£ '{name.capitalize()}' –Ω–µ—Ç –¥–æ–ª–≥–æ–≤.")
                return

            markup = InlineKeyboardMarkup()
            response_text = f"*{name.capitalize()}* –¥–æ–ª–∂–µ–Ω(–Ω–∞):\n\n"
            for debt_id, item in debts:
                response_text += f"‚Äì {item}\n"
                button = InlineKeyboardButton(
                    f"‚ùå –í–µ—Ä–Ω—É–ª(–∞) '{item}'", callback_data=f"del_{debt_id}")
                markup.add(button)

            bot.send_message(message.chat.id, response_text,
                             reply_markup=markup, parse_mode='Markdown')

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            all_debts = db.get_all_debts()
            if not all_debts:
                bot.send_message(message.chat.id, "üéâ –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!")
                return

            response_text = "*–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:*\n\n"
            for name, items in all_debts.items():
                response_text += f"*{name.capitalize()}:*\n"
                for item in items:
                    response_text += f"  ‚Äì {item}\n"
                response_text += "\n"

            bot.send_message(message.chat.id, response_text,
                             parse_mode='Markdown')

    @bot.message_handler(commands=['del'])
    def delete_command(message):
        try:
            _, name, *item_parts = message.text.split()
            item = " ".join(item_parts)

            debts = db.get_debts_by_name(name)
            for debt_id, debt_item in debts:
                if debt_item.lower() == item.lower():
                    db.delete_debt_by_id(debt_id)
                    bot.reply_to(
                        message, f"‚úÖ –î–æ–ª–≥ '{item}' —É {name.capitalize()} —É–¥–∞–ª—ë–Ω.")
                    return

            bot.reply_to(
                message, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–ª–≥ '{item}' —É {name.capitalize()}.")
        except ValueError:
            bot.reply_to(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/del —Ñ–∞–º–∏–ª–∏—è —á—Ç–æ_–≤–µ—Ä–Ω—É–ª`")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('del_'))
    def delete_callback(call):
        try:
            debt_id = int(call.data.split('_')[1])
            if db.delete_debt_by_id(debt_id):
                bot.answer_callback_query(call.id, "‚úÖ –î–æ–ª–≥ —É–¥–∞–ª–µ–Ω!")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∏–∑ –Ω–µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è—è –ø–æ–º–µ—Ç–∫—É
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"{call.message.text}\n\n_(–û–¥–∏–Ω –∏–∑ –¥–æ–ª–≥–æ–≤ –ø–æ–≥–∞—à–µ–Ω)_",
                    reply_markup=None,
                    parse_mode='Markdown'
                )
            else:
                bot.answer_callback_query(
                    call.id, "‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"{call.message.text}\n\n_(–≠—Ç–æ—Ç –¥–æ–ª–≥ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ)_",
                    reply_markup=None,
                    parse_mode='Markdown'
                )
        except Exception as e:
            print(f"Error in delete_callback: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
